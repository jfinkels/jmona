/**
 * DefaultListFactory.java
 * 
 * Copyright 2010 Jeffrey Finkelstein
 * 
 * This file is part of jmona.
 * 
 * jmona is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * jmona is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * jmona. If not, see <http://www.gnu.org/licenses/>.
 */
package jmona.impl;

import java.util.List;
import java.util.Vector;

import jmona.Factory;
import jmona.InitializationException;
import jmona.functional.Range;

/**
 * A factory which creates Lists containing elements of type E.
 * 
 * @author Jeffrey Finkelstein
 * @param <E>
 *          The type of element in the List to create.
 * @since 0.5
 */
public class DefaultListFactory<E> extends ListFactorySupport<E> implements
    Factory<List<E>> {

  /**
   * Creates a List of elements generated by the {@link #elementFactory}
   * property.
   * 
   * @return A List of elements generated by the {@link #elementFactory}
   *         property.
   * @throws InitializationException
   *           If an Exception is thrown when generating an element, or if no
   *           element factory has been set.
   * @see jmona.Factory#createObject()
   */
  @Override
  public List<E> createObject() throws InitializationException {
    try {
      this.sanityCheck();
    } catch (final NullPointerException exception) {
      throw new InitializationException(Messages.getString("DefaultListFactory.0")); //$NON-NLS-1$
    }

    final List<E> result = new Vector<E>();

    for (final int i : new Range(this.size())) {
      result.add(this.elementFactory().createObject());
    }

    return result;
  }

}
